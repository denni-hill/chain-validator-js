import { AlphaLocale, AlphanumericLocale, HashAlgorithm, IPVersion, IsAlphanumericOptions, IsBase64Options, IsByteLengthOptions, IsCurrencyOptions, IsDateOptions, IsDecimalOptions, IsEmailOptions, IsEmptyOptions, IsFloatOptions, IsFQDNOptions, IsIntOptions, IsISO8601Options, IsISSNOptions, IsLengthOptions, IsMACAddressOptions, IsMobilePhoneOptions, IsNumericOptions, IsStrongPasswordOptions, IsURLOptions, MobilePhoneLocale, PassportCountryCode, PostalCodeLocale, UUIDVersion } from "./../options";
import { Context } from "../context/context";
import { ValidatorContextItem } from "../context/validator-context-item";
import { ValidationHandlerReturner } from "../handler/validation-handler";
import { Validations } from "./validations";
import { ValidationChain } from "./validation-chain";
export declare class ValidationsImpl<Chain> implements Validations<Chain> {
    protected readonly context: Context;
    protected readonly chain: Chain;
    protected negateNext: boolean;
    constructor(context: Context, chain: Chain);
    protected addItem(validator: ValidatorContextItem): void;
    protected addStandartValidator(func: {
        (value: string): boolean;
    }, args: Record<string, unknown>, message: string): void;
    withMessage(message: string): Chain;
    not(): Validations<Chain>;
    custom(handler: ValidationHandlerReturner, options?: {
        args?: Record<string, unknown>;
        message?: string;
    }): Chain;
    isArray(elementValidationChain?: ValidationChain): Chain;
    isArrayLength(options?: {
        min?: number;
        max?: number;
    }): Chain;
    contains(seed: unknown): Chain;
    equals(comparison: string): Chain;
    isAfter(date: string): Chain;
    isAlpha(locale: AlphaLocale): Chain;
    isAlphanumeric(locale: AlphanumericLocale, options?: IsAlphanumericOptions): Chain;
    isAscii(): Chain;
    isBase32(): Chain;
    isBase58(): Chain;
    isBase64(options?: IsBase64Options): Chain;
    isBefore(date?: string): Chain;
    isIBAN(): Chain;
    isBIC(): Chain;
    isBoolean(): Chain;
    isByteLength(options?: IsByteLengthOptions): Chain;
    isCreditCard(): Chain;
    isCurrency(options?: IsCurrencyOptions): Chain;
    isEtheriumAddress(): Chain;
    isBtcAddress(): Chain;
    isDataURI(): Chain;
    isDate(options?: IsDateOptions): Chain;
    isDecimal(options?: IsDecimalOptions): Chain;
    isDivisibleBy(number: number): Chain;
    isEmail(options?: IsEmailOptions): Chain;
    isEmpty(options?: IsEmptyOptions): Chain;
    isFloat(options?: IsFloatOptions): Chain;
    isFQDN(options?: IsFQDNOptions): Chain;
    isFullWidth(): Chain;
    isHalfWidth(): Chain;
    isHash(algorithm: HashAlgorithm): Chain;
    isHexadecimal(): Chain;
    isHexColor(): Chain;
    isHSL(): Chain;
    isRgbColor(includePercentValues?: boolean): Chain;
    isIn(values: unknown[]): Chain;
    isInt(options?: IsIntOptions): Chain;
    isIP(version?: IPVersion): Chain;
    isIPRange(version?: IPVersion): Chain;
    isEAN(): Chain;
    isISIN(): Chain;
    isISO31661Alpha2(): Chain;
    isISO31661Alpha3(): Chain;
    isISO8601(options?: IsISO8601Options): Chain;
    isISSN(options?: IsISSNOptions): Chain;
    isISRC(): Chain;
    isRFC3339(): Chain;
    isJSON(): Chain;
    isJWT(): Chain;
    isLatLong(): Chain;
    isLength(options?: IsLengthOptions): Chain;
    isLocale(): Chain;
    isLowercase(): Chain;
    isMACAddress(options?: IsMACAddressOptions): Chain;
    isMagnetURI(): Chain;
    isMD5(): Chain;
    isMimeType(): Chain;
    isMobilePhone(locale?: "any" | MobilePhoneLocale | MobilePhoneLocale[], options?: IsMobilePhoneOptions): Chain;
    isMongoId(): Chain;
    isMultibyte(): Chain;
    isNumeric(options?: IsNumericOptions & {
        min?: number;
        max?: number;
    }): Chain;
    isOctal(): Chain;
    isPassportNumber(countryCode?: PassportCountryCode): Chain;
    isPort(): Chain;
    isPostalCode(locale: "any" | PostalCodeLocale): Chain;
    isSemVer(): Chain;
    isStrongPassword(options?: IsStrongPasswordOptions): Chain;
    isSurrogatePair(): Chain;
    isURL(options?: IsURLOptions): Chain;
    isUppercase(): Chain;
    isUUID(version?: UUIDVersion): Chain;
    isVariableWidth(): Chain;
    isWhitelisted(chars: string | string[]): Chain;
    matches(pattern: RegExp): Chain;
    matches(pattern: string, modifiers?: string): Chain;
    isSlug(): Chain;
    isString(): Chain;
}
